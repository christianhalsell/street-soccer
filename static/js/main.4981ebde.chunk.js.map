{"version":3,"sources":["components/TeamCreator.jsx","App.js","index.js"],"names":["TeamCreator","useState","numberOfPlayers","setNumberOfPlayers","numberOfTeams","setNumberOfTeams","teams","setTeams","teamRoster","tempTeams","className","type","min","value","onChange","e","target","onClick","alert","i","push","console","log","addPlayers","createRound","randomRoster","originalPlayers","randomPlayers","length","j","Math","floor","random","temp","randomizePlayers","k","map","team","idx","player","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOA+FeA,EA7FK,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACjBC,EADiB,KACAC,EADA,OAEkBF,mBAAS,GAF3B,mBAEjBG,EAFiB,KAEFC,EAFE,OAGEJ,mBAAS,IAHX,mBAGjBK,EAHiB,KAGVC,EAHU,KAKpBC,EAAa,GACbC,EAAY,GA2DhB,OACE,gCACE,iCACE,sBAAKC,UAAU,WAAf,UACE,gCAAO,qDACP,uBAAOC,KAAK,SAASC,IAAI,IAAIC,MAAOX,EAAiBY,SAAU,SAAAC,GAAC,OAAIZ,EAAmBY,EAAEC,OAAOH,aAElG,sBAAKH,UAAU,WAAf,UACE,gCAAO,mDACP,uBAAOC,KAAK,SAASC,IAAI,IAAIC,MAAOT,EAAeU,SAAW,SAAAC,GAAC,OAAIV,EAAiBU,EAAEC,OAAOH,gBAGjG,uBACA,8BAAK,wBAAQI,QA1CK,WACpB,GAAIf,EAAkBE,EACpBc,MAAM,mDAIR,GAAId,EAAgB,IAAM,EAA1B,EAjCiB,WACjBI,EAAa,GACb,IAAK,IAAIW,EAAI,EAAGA,GAAKjB,EAAiBiB,IACpCX,EAAWY,KAAKD,GAElBE,QAAQC,IAAR,uBAA4Bd,IAiC5Be,GA9BkB,WAClBd,EAAY,GACZ,IAAK,IAAIU,EAAI,EAAGA,EAAIf,EAAee,IACjCV,EAAUW,KAAK,IA4BjBI,GAKA,IAHA,IAAMC,EA1BiB,SAACC,GAExB,IADA,IAAMC,EAAgBD,EACbP,EAAIQ,EAAcC,OAAS,EAAGT,EAAI,EAAGA,IAAK,CACjD,IAAIU,EAAIC,KAAKC,MAAMD,KAAKE,UAAYb,EAAI,IACpCc,EAAON,EAAcR,GACzBQ,EAAcR,GAAKQ,EAAcE,GACjCF,EAAcE,GAAKI,EAGrB,OAAON,EAiBcO,CAAiB1B,GAClCW,EAAI,EAECU,EAAI,EAAGA,EAAIrB,EAAWoB,OAASxB,EAAeyB,IACrD,IAAK,IAAIM,EAAI,EAAGA,EAAI/B,EAAe+B,IAC7BhB,EAAIX,EAAWoB,SACjBnB,EAAU0B,GAAGf,KAAKK,EAAaN,IAC/BA,KAKNZ,EAASE,QAnBPS,MAAM,oCAmCD,uCACL,uBACA,8BACGZ,EAAM8B,KAAI,SAACC,EAAMC,GAAP,OACT,gCAAgB,sCAASA,EAAM,EAAf,OAAhB,IAAwC,IACvCD,EAAKD,KAAI,SAACG,EAAQpB,GAAT,OACR,iCAAoBoB,EAAQpB,EAAIkB,EAAKT,OAAS,EAAI,KAAO,OAA9CW,QAFHF,YCxELG,MARf,WACE,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,OCDN+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4981ebde.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nconst TeamCreator = () => {\n  const [numberOfPlayers, setNumberOfPlayers] = useState(12);\n  const [numberOfTeams, setNumberOfTeams] = useState(4);\n  const [teams, setTeams] = useState([])\n\n  let teamRoster = []\n  let tempTeams = [];\n  \n\n  const addPlayers = () => {\n    teamRoster = [];\n    for (let i = 1; i <= numberOfPlayers; i++) {\n      teamRoster.push(i);\n    }\n    console.log(`Team Roster: ${teamRoster}`)\n  };\n\n  const createRound = () => {\n    tempTeams = []; // clear teams\n    for (let i = 0; i < numberOfTeams; i++) {\n      tempTeams.push([]);\n    }\n  };\n\n  const randomizePlayers = (originalPlayers) => {\n    const randomPlayers = originalPlayers\n    for (var i = randomPlayers.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = randomPlayers[i];\n      randomPlayers[i] = randomPlayers[j];\n      randomPlayers[j] = temp;\n    }\n    \n    return randomPlayers;\n  };\n\n  const generateTeams = () => {\n    if (numberOfPlayers < numberOfTeams) {\n      alert(\"You need more players than number of teams\");\n      return;\n    }\n\n    if (numberOfTeams % 2 !== 0) {\n      alert(\"You need an even numer of teams\");\n      return;\n    }\n    \n    addPlayers();\n    createRound();\n\n    const randomRoster = randomizePlayers(teamRoster);\n    let i = 0;\n    \n    for (let j = 0; j < teamRoster.length / numberOfTeams; j++) {\n      for (let k = 0; k < numberOfTeams; k++) {\n        if (i < teamRoster.length) {\n          tempTeams[k].push(randomRoster[i])\n          i++;\n        }\n      }    \n    }\n\n    setTeams(tempTeams);  \n  };\n\n  return (\n    <div>\n      <form>\n        <div className=\"inputRow\">\n          <label><b>Number of Players:</b></label>\n          <input type=\"number\" min=\"1\" value={numberOfPlayers} onChange={e => setNumberOfPlayers(e.target.value)} />\n        </div>\n        <div className=\"inputRow\">\n          <label><b>Number of Teams:</b></label>\n          <input type=\"number\" min=\"1\" value={numberOfTeams} onChange={ e => setNumberOfTeams(e.target.value) } />\n        </div>\n      </form>\n      <br />\n      <div><button onClick={generateTeams}>Click to generate teams</button></div>\n      <br />\n      <div>\n        {teams.map((team, idx) => (\n          <div key={team}><b>Team {idx + 1}:</b> {' '}\n          {team.map((player, i) => (\n            <span key={player}>{player}{i < team.length - 1 ? ', ' : null}</span>\n          ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default TeamCreator\n","import './App.css';\n\nimport TeamCreator from './components/TeamCreator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TeamCreator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}